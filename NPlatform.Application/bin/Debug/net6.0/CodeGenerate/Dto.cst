<%@ CodeTemplate Language="C#" TargetLanguage="C#"  ResponseEncoding="UTF-8" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
/***********************************************************
**项目名称:ZJJWFoundationPlatform.Dto                                                             	
**功能描述:	数据传输层
**作    者: 	codesmith脚本生成                                         			   
**版 本 号:	1.0                                                  
**修改历史：
************************************************************/

namespace  NPlatform.Dto.<%= GetModuleName(SourceTable)%>
{
	using System;
	using System.Runtime.Serialization;
	using NPlatform;
    using System.ComponentModel.DataAnnotations;
	/// <summary>
	/// <%= GetName(SourceTable)%>，<%=SourceTable.Description.Replace("\n","").Replace("\r","")%>，数据传输对象
	/// </summary>
    [DataContract]
    public partial class <%= GetName(SourceTable)%>Dto:BaseDto,IDto
	{
    	public <%= GetName(SourceTable)%>Dto()
		{
		}
        public  <%= GetName(SourceTable)%>Dto(string aggregateId):base(aggregateId)
		{ }
        
		<% for (int i = 0; i < SourceTable.Columns.Count; i++) { 
        %>
		/// <summary>
		/// <%=SourceTable.Columns[i].Description.Replace("\n","").Replace("\r","") %>
		/// </summary>
        <%=GetDataAnnotations(SourceTable.Columns[i]) %>
        public <%= GetCSharpVariableType(SourceTable.Columns[i]) %> <%= SourceTable.Columns[i].Name %> { get; set; }
		<% if (i < SourceTable.Columns.Count - 1) Response.Write("\r\n"); %>	
		<%}%>
	}
}

<script runat="template">


public string GetMemberVariableName(ColumnSchema column)
{
	//string propertyName = GetPropertyName(column);
	string propertyName = column.Name;
	string memberVariableName =  propertyName.ToLower();
	
	return memberVariableName;
}


public string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;
	
	if (propertyName == column.Table.Name + "Name") return "Name";
	if (propertyName == column.Table.Name + "Description") return "Description";
	
	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);
	
	return propertyName;
}

public int GetPropertyNameLength(ColumnSchema column)
{
	return (GetPropertyName(column)).Length;
}
public int GetPropertyNameMaxLength()
{
	int ret = 0;
	foreach(ColumnSchema column in SourceTable.Columns)
	{
		ret = ret < GetPropertyNameLength(column)?GetPropertyNameLength(column):ret;
	}
	return ret;
}
public string GetModuleName(TableSchema table)
{
    var tableName=table.Name;
    
    if(tableName.Contains("_"))
    {
        var mdName=tableName.Split('_')[0];
        return mdName.Substring(0,1).ToUpper()+mdName.Substring(1);
    }
    else
        throw new Exception("数据库表命名错误！");
}
public string GetMemberVariableDefaultValue(ColumnSchema column)
{
	if(column.IsPrimaryKeyMember)
	{
	    return "";
	}
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "String.Empty";
		}
		default:
		{
			return "";
		}
	}
}
public string GetDataAnnotations(ColumnSchema column)
{
    string attr="[Display(Name =\""+column.Description+"\")]";
    
	switch (column.DataType)
	{
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
        case DbType.String: 
		case DbType.StringFixedLength:
            attr+="\r\n		[StringLength("+column.Size+")]";
            break;
        case DbType.Time:
            attr+="\r\n     [DisplayFormat(DataFormatString =\"HH:mm:ss\")]";
            break;
        case DbType.DateTime:
        case DbType.DateTime2:
            attr+="\r\n     [DisplayFormat(DataFormatString =\"YYYY/MM/dd HH:mm:ss\")]";
            break;
        case DbType.Date:
            attr+="\r\n     [DisplayFormat(DataFormatString =\"YYYY/MM/dd\")]";
            break;
	}
    if(column.Name!="password")
    {
            attr+="\r\n		[DataMember(Name= \""+ column.Name+"\")]";
    }
    
    return attr;
}
public string GetCSharpVariableType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "string";
		case DbType.AnsiStringFixedLength: return "string";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "bool";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "decimal";
		case DbType.Double: return "double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "int";
		case DbType.Int64: return "long";
		case DbType.Object: return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return "float";
		case DbType.String: return "string";
		case DbType.StringFixedLength: return "string";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

public string GetReaderMethod(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Byte:
		{
			return "GetByte";
		}
		case DbType.Int16:
		{
			return "GetInt16";
		}
		case DbType.Int32:
		{
			return "GetInt32";
		}
		case DbType.Int64:
		{
			return "GetInt64";
		}
		case DbType.AnsiStringFixedLength:
		case DbType.AnsiString:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "GetString";
		}
		case DbType.Boolean:
		{
			return "GetBoolean";
		}
		case DbType.Guid:
		{
			return "GetGuid";
		}
		case DbType.Currency:
		case DbType.Decimal:
		{
			return "GetDecimal";
		}
		case DbType.DateTime:
		case DbType.Date:
		{
			return "GetDateTime";
		}
		case DbType.Binary:
		{
			return "GetBytes";
		}
		default:
		{
			return "__SQL__" + column.DataType;
		}
	}
}

public string GetName(TableSchema table)
{
	
	if(table==null)
	{
	    return null;
	}
    string[] nameArray=  table.Name.Split('_');
    switch(nameArray.Length)
    {
        case 2:
            return nameArray[1].Substring(0,1).ToUpper()+nameArray[1].Substring(1);
        case 3:
            return nameArray[1].Substring(0,1).ToUpper()+nameArray[1].Substring(1)+nameArray[2];
    }
    return null;
}
public string GetSqlDbType(ColumnSchema column)
{
	switch (column.NativeType)
	{
		case "bigint": return "BigInt";
		case "binary": return "Binary";
		case "bit": return "Bit";
		case "char": return "Char";
		case "datetime": return "DateTime";
		case "decimal": return "Decimal";
		case "float": return "Float";
		case "image": return "Image";
		case "int": return "Int";
		case "money": return "Money";
		case "nchar": return "NChar";
		case "ntext": return "NText";
		case "numeric": return "Decimal";
		case "nvarchar": return "NVarChar";
		case "real": return "Real";
		case "smalldatetime": return "SmallDateTime";
		case "smallint": return "SmallInt";
		case "smallmoney": return "SmallMoney";
		case "sql_variant": return "Variant";
		case "sysname": return "NChar";
		case "text": return "Text";
		case "timestamp": return "Timestamp";
		case "tinyint": return "TinyInt";
		case "uniqueidentifier": return "UniqueIdentifier";
		case "varbinary": return "VarBinary";
		case "varchar": return "VarChar";
		default: return "__UNKNOWN__" + column.NativeType;
	}
}


public override string GetFileName()
{
	return this.GetName(this.SourceTable) + ".cs";
}
</script>