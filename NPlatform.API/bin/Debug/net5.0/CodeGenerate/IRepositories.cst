<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
/***********************************************************
**项目名称:	                                                                  				   
**功能描述:	  <%= GetName(SourceTable) %> <%=SourceTable.Description %>
**作    者: 	此代码由CodeSmith生成。                              			   
**版 本 号:	1.0                          
**修改历史：
************************************************************/
namespace NPlatform.Domains.IRepositories.<%=GetModuleName(SourceTable)%>
{
    using NPlatform;
    using System;
    using NPlatform.Repositories.IRepositories;
    
	/// <summary>
    /// <%=GetName(SourceTable)%>仓储操作层接口
    /// </summary>
    public partial interface I<%= GetName(SourceTable) %>Repository : IRepository<Entity.<%=GetModuleName(SourceTable)%>.<%= GetName(SourceTable) %>, string>
    {
    }
}

<script runat="template">

    public string GetCamelCaseName(string value)
    {
        return value.ToLower();
    }

    public string ConvertFirstCharToUpper(string value)
    {
        return value.Substring(0, 1).ToUpper() + value.Substring(1);
    }
    
public string GetModuleName(TableSchema table)
{
    var tableName=table.Name;
    
    if(tableName.Contains("_"))
    {
        var mdName=tableName.Split('_')[0];
        return mdName.Substring(0,1).ToUpper()+mdName.Substring(1);
    }
    else
        throw new Exception("数据库表命名错误！");
}

	public string GetName(TableSchema table)
    {
		try			
		{
		if(table==null)
		{
		    return null;
		}
            string[] nameArray=  table.Name.Split('_');
            if(nameArray.Length<=1)
                return table.Name;
            
            string tabName="";
            for(var i=1;i<nameArray.Length;i++)
            {
                string tname=nameArray[i];
                string first=tname.Substring(0,1);
                string end=tname.Substring(1);
                
                
                tabName=tabName+first.ToUpper()+end;
                if(i!=nameArray.Length-1)              
                    tabName+="_";
                
            }
            return tabName;
		}
		catch(Exception ex)
		{
			throw new Exception(table.Name+ex.Message);
		}
    }
    
	public string GetLowerCaseName(string value)
    {
	    return value.ToLower();
    }
	
	public string GetModuleInstanceName(TableSchema table)
	{
		return table.Name.ToLower() ;
	}

    public string GetCSharpVariableType(ColumnSchema column)
    {
		if (column.Name.EndsWith("TypeCode")) return column.Name;
		
		switch (column.DataType)
		{
			case DbType.AnsiString: return "string";
			case DbType.AnsiStringFixedLength: return "string";
			case DbType.Binary: return "byte[]";
			case DbType.Boolean: return "bool";
			case DbType.Byte: return "byte";
			case DbType.Currency: return "decimal";
			case DbType.Date: return "DateTime";
			case DbType.DateTime: return "DateTime";
			case DbType.Decimal: return "decimal";
			case DbType.Double: return "double";
			case DbType.Guid: return "Guid";
			case DbType.Int16: return "short";
			case DbType.Int32: return "int";
			case DbType.Int64: return "long";
			case DbType.Object: return "object";
			case DbType.SByte: return "sbyte";
			case DbType.Single: return "float";
			case DbType.String: return "string";
			case DbType.StringFixedLength: return "string";
			case DbType.Time: return "TimeSpan";
			case DbType.UInt16: return "ushort";
			case DbType.UInt32: return "uint";
			case DbType.UInt64: return "ulong";
			case DbType.VarNumeric: return "decimal";
			default:
			{
				return "__UNKNOWN__" + column.NativeType;
			}
		}
	}
	
	public string GetPrimaryKeyCSharpType()
	{
		return GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0]);
	}
	
	public override string GetFileName()
	{
		return "I"+this.GetName(this.SourceTable) + "Repository.cs";
	}
</script>